//  {{ prefix }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright {{ year }} {{ developer.company }}. All rights reserved.

import UIKit

protocol {{ prefix }}{{ module_info.name }}PresentationLogic {
    func presentSomething(response: {{ prefix }}{{ module_info.name }}.Something.Response)
}

/// Отвечает за отображение данных модуля {{ module_info.name }}
final class {{ prefix }}{{ module_info.name }}Presenter: {{ prefix }}{{ module_info.name }}PresentationLogic {
    weak var viewController: {{ prefix }}{{ module_info.name }}DisplayLogic?

    // MARK: Do something
    func presentSomething(response: {{ prefix }}{{ module_info.name }}.Something.Response) {
        var viewModel: {{ prefix }}{{ module_info.name }}.Something.ViewModel
        
        switch response.result {
        case let .failure(error):
            viewModel = {{ prefix }}{{ module_info.name }}.Something.ViewModel(state: .error(message: error.localizedDescription))
        case let .success(result):
            if result.isEmpty {
                viewModel = {{ prefix }}{{ module_info.name }}.Something.ViewModel(state: .emptyResult)
            } else {
                viewModel = {{ prefix }}{{ module_info.name }}.Something.ViewModel(state: .result(result))
            }
        }
        
        viewController?.displaySomething(viewModel: viewModel)
    }
}
