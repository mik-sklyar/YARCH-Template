//  {{ prefix }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright {{ year }} {{ developer.company }}. All rights reserved.

protocol {{ prefix }}{{ module_info.name }}BusinessLogic {
    func doSomething(request: {{ prefix }}{{ module_info.name }}.Something.Request)
}

/// Класс для описания бизнес-логики модуля {{ module_info.name }}
final class {{ prefix }}{{ module_info.name }}Interactor: {{ prefix }}{{ module_info.name }}BusinessLogic {
    let presenter: {{ prefix }}{{ module_info.name }}PresentationLogic
    let provider: {{ prefix }}{{ module_info.name }}ProviderProtocol

    init(presenter: {{ prefix }}{{ module_info.name }}PresentationLogic, provider: {{ prefix }}{{ module_info.name }}ProviderProtocol = {{ prefix }}{{ module_info.name }}Provider()) {
        self.presenter = presenter
        self.provider = provider
    }
    
    // MARK: Do something
    func doSomething(request: {{ prefix }}{{ module_info.name }}.Something.Request) {
        provider.getItems { (items, error) in
            let result: {{ prefix }}{{ module_info.name }}.{{ prefix }}{{ module_info.name }}RequestResult
            if let items = items {
                result = .success(items)
            } else if let error = error {
                result = .failure(.someError(message: error.localizedDescription))
            } else {
                result = .failure(.someError(message: "No Data"))
            }
            self.presenter.presentSomething(response: {{ prefix }}{{ module_info.name }}.Something.Response(result: result))
        }
    }
}
