//  {{ prefix }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright {{ year }} {{ developer.company }}. All rights reserved.

protocol {{ prefix }}{{ module_info.name }}ProviderProtocol {
    func getItems(completion: @escaping ([{{ prefix }}{{ module_info.name }}Model]?, {{ prefix }}{{ module_info.name }}ProviderError?) -> Void)
}

enum {{ prefix }}{{ module_info.name }}ProviderError: Error {
    case getItemsFailed(underlyingError: Error)
}

/// Отвечает за получение данных модуля {{ module_info.name }}
struct {{ prefix }}{{ module_info.name }}Provider: {{ prefix }}{{ module_info.name }}ProviderProtocol {
    let dataStore: {{ prefix }}{{ module_info.name }}DataStore
    let service: {{ prefix }}{{ module_info.name }}ServiceProtocol

    init(dataStore: {{ prefix }}{{ module_info.name }}DataStore = {{ prefix }}{{ module_info.name }}DataStore(), service: {{ prefix }}{{ module_info.name }}ServiceProtocol = {{ prefix }}{{ module_info.name }}Service()) {
        self.dataStore = dataStore
        self.service = service
    }

    func getItems(completion: @escaping ([{{ prefix }}{{ module_info.name }}Model]?, {{ prefix }}{{ module_info.name }}ProviderError?) -> Void) {
        if dataStore.models?.isEmpty == false {
            return completion(self.dataStore.models, nil)
        }
        service.fetchItems { (array, error) in
            if let error = error {
                completion(nil, .getItemsFailed(underlyingError: error))
            } else if let models = array {
                self.dataStore.models = models
                completion(self.dataStore.models, nil)
            }
        }
    }
}
